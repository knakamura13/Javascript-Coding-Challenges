/*
    Project Euler 002
    Even Fibonacci Numbers

    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
 */
function solution() {
    // Sets the non-inclusive integer limit of our fibonacci sequence.
    let max = arguments[0];

    // Tracks the sum of the even fibonacci numbers in our sequence.
    let sum = 0;

    // Store the previous two terms.
    let prev1 = 0;
    let prev2 = 1;

    // For each integer from 1 to `max`.
    for (let i=1; i<=Number.MAX_SAFE_INTEGER; i++) {
        // Calculate the current fibonacci number.
        let fib = prev1 + prev2;

        // Base case: break loop if fibonacci sequence has exceeded the `max`.
        if (fib >= max)
            break;

        // Add the even fibonacci number to the sum.
        if (fib % 2 === 0)
            sum += fib;

        // Update the two most recent previous terms.
        prev1 = prev2;
        prev2 = fib;
    }

    return sum
}

function runTests(func, tests) {
    let passed = 0;
    let failed = 0;

    for (let i = 0; i < tests.length; i++) {
        let test = tests[i];
        let result = func(...test.input);

        if (result === test.answer) {
            console.log(`${i + 1}: PASS (${test.input})`);
            passed += 1;
        } else {
            console.log(`${i + 1}: FAIL (${test.input})  -->  (Got: ${result}, Expected: ${test.answer})`);
            failed += 1;
        }
    }

    console.log(`\n${passed} passed, ${failed} failed.`);
}

runTests(
    func = solution,
    tests = [
        {   // 1
            input: [100],
            answer: 44
        },
        {   // 2
            input: [4000000],
            answer: 4613732
        },
    ]
)